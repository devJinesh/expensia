# Example application.properties - Use environment variables for production
# For local development, copy this file to application.properties and fill in values

spring.main.allow-circular-references=true

# Server port - Uses PORT environment variable in production (required for Render)
server.port=${PORT:8080}

# JPA
spring.jpa.hibernate.ddl-auto=update

# Datasource - Uses environment variables in production
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:mysql://localhost:3306/expensetracker}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:root}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JWT - Uses environment variables in production
app.jwtSecret=${JWT_SECRET:change_me_replace_with_a_secure_random_value}
app.jwtExpirationMs=${JWT_EXPIRATION_MS:86400000}

# Mail - Uses environment variables in production
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:your-email@gmail.com}
spring.mail.password=${MAIL_PASSWORD:your-mail-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Verification
app.verificationCodeExpirationMs=${VERIFICATION_CODE_EXPIRATION_MS:60000}

# Uploads
app.user.profile.upload.dir=${UPLOAD_DIR:./uploads/user/profile}
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB

# AWS S3 / DigitalOcean Spaces Configuration
# For DigitalOcean Spaces, use: https://<region>.digitaloceanspaces.com

aws.s3.endpoint=${AWS_S3_ENDPOINT:https://nyc3.digitaloceanspaces.com}
aws.s3.access-key=${AWS_S3_ACCESS_KEY}
aws.s3.secret-key=${AWS_S3_SECRET_KEY}
aws.s3.region=${AWS_S3_REGION:nyc3}
aws.s3.bucket-name=${AWS_S3_BUCKET_NAME}

# OAuth2 Google Configuration - Uses environment variables in production
spring.security.oauth2.client.registration.google.client-id=${OAUTH2_GOOGLE_CLIENT_ID:YOUR_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${OAUTH2_GOOGLE_CLIENT_SECRET:YOUR_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
app.oauth2.frontend.redirect-url=${OAUTH2_FRONTEND_REDIRECT_URL:http://localhost:3000/auth/callback}